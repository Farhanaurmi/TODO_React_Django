{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MH Tanmoy\\\\Desktop\\\\TODO_React_Django\\\\frontend\\\\src\\\\Screens\\\\CreateTodoScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport FormContainer from '../Components/FormContainer';\nimport { createTodo } from '../actions/todoActions';\nimport { TODO_CREATE_RESET } from '../constants/todoConstants';\nimport { listSubscribeDetails } from '../actions/subscribeActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateTodoScreen({\n  history\n}) {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [memo, setMemo] = useState('');\n  const dispatch = useDispatch();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const todoCreate = useSelector(state => state.todoCreate);\n  const {\n    success,\n    loading,\n    error\n  } = todoCreate;\n  const subscribeDetails = useSelector(state => state.subscribeDetails);\n  const {\n    subs\n  } = subscribeDetails;\n  useEffect(() => {\n    if (!userInfo || !subs) {\n      history.push('/login');\n    } else {\n      subs.map(e => {\n        console.log(e.isPaid);\n\n        if (!e.isPaid) {\n          history.push('/subscription');\n        }\n      });\n    }\n\n    if (success) {\n      dispatch({\n        type: TODO_CREATE_RESET\n      });\n      history.push('/');\n    }\n  }, [dispatch, history, userInfo, success, subs]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(createTodo({\n      'title': title,\n      'memo': memo\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 12,\n        className: \"justify-content-md-center text-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 23\n        }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter Title\",\n              value: title,\n              onChange: e => setTitle(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"memo\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Memo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"textarea\",\n              placeholder: \"Enter Memo\",\n              value: memo,\n              onChange: e => setMemo(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            className: \"my-2\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateTodoScreen, \"DNGoydT15kNFgqUPAnQ7mKkv40A=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = CreateTodoScreen;\nexport default CreateTodoScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTodoScreen\");","map":{"version":3,"sources":["C:/Users/MH Tanmoy/Desktop/TODO_React_Django/frontend/src/Screens/CreateTodoScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","Row","Col","useDispatch","useSelector","Loader","Message","FormContainer","createTodo","TODO_CREATE_RESET","listSubscribeDetails","CreateTodoScreen","history","title","setTitle","memo","setMemo","dispatch","userLogin","state","userInfo","todoCreate","success","loading","error","subscribeDetails","subs","push","map","e","console","log","isPaid","type","submitHandler","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport FormContainer from '../Components/FormContainer'\r\nimport { createTodo } from '../actions/todoActions'\r\nimport { TODO_CREATE_RESET } from '../constants/todoConstants'\r\nimport { listSubscribeDetails } from '../actions/subscribeActions'\r\n\r\n\r\nfunction CreateTodoScreen({history}) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [memo, setMemo] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const todoCreate = useSelector(state => state.todoCreate)\r\n    const { success, loading, error } = todoCreate\r\n\r\n    const subscribeDetails = useSelector(state => state.subscribeDetails)\r\n    const {subs} = subscribeDetails\r\n\r\n    useEffect(() => {\r\n        \r\n        if (!userInfo || !subs){\r\n            history.push('/login')\r\n        }else{\r\n                subs.map(e => {\r\n                    console.log(e.isPaid)\r\n                    if(!e.isPaid){\r\n                        history.push('/subscription')\r\n                    }\r\n                });  \r\n        }\r\n        if(success){\r\n            dispatch({type:TODO_CREATE_RESET})\r\n            history.push('/')\r\n        }\r\n    }, [dispatch,history, userInfo, success, subs])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n            dispatch(createTodo({ \r\n                'title': title,\r\n                'memo': memo\r\n             }))            \r\n    }\r\n\r\n    return (\r\n        <div>\r\n             <Row>\r\n            <Col md={12} className=\"justify-content-md-center text-left\">\r\n                <h2>Create Task</h2>\r\n\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='title'>\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                   \r\n                        type='text'\r\n                        placeholder='Enter Title'\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='memo'>\r\n                    <Form.Label>Memo</Form.Label>\r\n                    <Form.Control\r\n                   \r\n                        type='textarea'\r\n                        placeholder='Enter Memo'\r\n                        value={memo}\r\n                        onChange={(e) => setMemo(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    type='submit'\r\n                    variant='primary'\r\n                    className='my-2'\r\n                > \r\n                    Create\r\n                </Button>\r\n\r\n            </Form>\r\n            </Col>\r\n\r\n        </Row>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTodoScreen\r\n"]},"metadata":{},"sourceType":"module"}